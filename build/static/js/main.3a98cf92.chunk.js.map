{"version":3,"sources":["logo.svg","components/TodoItem.js","components/Todos.js","actions/todoAction.js","reducers/todoReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoItem","styleVal","this","props","completed","className","type","checked","onChange","Change","id","style","item","onClick","Delete","value","Component","Todos","deleteTodo","Add","newTodo","uuid","v4","txtNewTodo","createTodo","updateTodoText","updateTodo","handleChange","bind","fetchTodos","e","target","todos","todosInState","map","i","name","connect","state","todosReducerCombined","newTodoInState","todo","fn","fetch","then","res","json","payload","val","method","headers","body","JSON","stringify","initialState","todoReducer","action","Object","assign","filter","index","combineReducers","middleware","thunk","store","createStore","compose","applyMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a98cf92.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react'\r\n\r\nexport default class TodoItem extends Component {\r\n    \r\n    render()\r\n     {\r\n        let styleCompleted = {\r\n            \"color\":\"red\",\r\n            \"textDecoration\": \"line-through\"\r\n        }\r\n        let styleNotCompleted = {\r\n            \"color\":\"black\"        \r\n        }\r\n        let styleVal =  styleNotCompleted;\r\n\r\n        if(this.props.completed)\r\n             styleVal =  styleCompleted;\r\n\r\n        return (\r\n            \r\n            <div className =\"todo-item\">                \r\n                    <input type=\"checkbox\" checked ={this.props.completed} \r\n                            onChange = {() =>this.props.Change(this.props.id)} /> \r\n                        <p style ={styleVal} > {this.props.item} </p>\r\n                    <div style = {{ 'margin-left': '10px' ,'margin-bottom': '15px' }} >  \r\n                        <input type =\"button\" onClick = {() => this.props.Delete(this.props.id)} value = \"Delete\" />            \r\n                    </div>                 \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//export default TodoItem ; // connect(null ,{createTodo})(TodoItem);","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {fetchTodos ,updateTodoText ,updateTodo , createTodo ,deleteTodo} from '../actions/todoAction';\r\n\r\nimport TodoItem from './TodoItem';\r\nimport uuid from 'uuid';\r\n\r\nclass Todos extends Component {\r\n    constructor()\r\n    {\r\n        super();\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    componentWillMount(){\r\n        this.props.fetchTodos();              \r\n    }\r\n       \r\n    Delete =(id) =>{\r\n        this.props.deleteTodo(id);\r\n    }\r\n\r\n    Add = () =>{\r\n        const newTodo = { id:uuid.v4() , item:this.props.txtNewTodo ,completed:0 }        \r\n        this.props.createTodo(newTodo);\r\n        //this.props.todosInState.push(newTodo);\r\n        this.props.updateTodoText('');\r\n        //this.props.fetchTodos(); \r\n    }\r\n\r\n    handleChange(e)\r\n    {\r\n        this.props.updateTodoText(e.target.value);           \r\n    }\r\n    Change = (id) =>\r\n    {\r\n        this.props.updateTodo(id);        \r\n    }\r\n    render() {\r\n        const todos = this.props.todosInState.map( i => <TodoItem id = {i.id}  completed = {i.completed} item = {i.item}  Change = {this.Change}  Delete = {this.Delete} />  )\r\n                                \r\n\r\n        return <div className =\"todo-list\" > \r\n                    <h2>Todo List</h2>\r\n                    { todos}            \r\n                    <div> \r\n                        <input type =\"text\" name = \"txtNewTodo\" id = \"txtNewTodo\" value = { this.props.txtNewTodo} onChange = {this.handleChange}  ></input> \r\n                        <input type =\"button\" onClick = {() => this.Add()} value = \"Add\" />                                         \r\n                    </div>                    \r\n                                       \r\n                </div>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state =>({\r\n    todosInState: state.todosReducerCombined.todos,\r\n    newTodoInState: state.todosReducerCombined.todo,\r\n    txtNewTodo: state.todosReducerCombined.txtNewTodo\r\n});\r\nexport default connect(mapStateToProps ,{fetchTodos ,updateTodoText ,createTodo ,deleteTodo ,updateTodo}) (Todos); ","\r\nexport const FETCH_TODOS = 'FETCH_TODOS';\r\nexport const NEW_TODO = 'NEW_TODO';\r\nexport const UPDATE_TODO = 'UPDATE_TODO';\r\nexport const UPDATE_TODO_TEXT = 'UPDATE_TODO_TEXT';\r\nexport const DELETE_TODO = 'DELETE_TODO';\r\n\r\n\r\nexport const updateTodoText = (val) =>fn =>{ \r\n    fn({type:UPDATE_TODO_TEXT ,payload:val });\r\n};\r\n\r\nexport const updateTodo =( id) =>({ type:UPDATE_TODO ,payload:id });\r\n\r\nexport const fetchTodos = () => fn =>\r\n{\r\n    fetch('http://localhost:5000')\r\n            .then(res =>res.json())\r\n            .then(todos => fn({ type:FETCH_TODOS ,payload:todos })  );     \r\n};\r\n\r\nexport const createTodo = (newTodo) => fn =>\r\n{      \r\n    \r\n    fetch('http://localhost:5000' ,{\r\n            method: 'POST',\r\n            headers:{\r\n                'content-type': 'application/json'\r\n            },\r\n            body:JSON.stringify(newTodo)\r\n        }).then(res=>res.json())\r\n          .then(fn({ type:NEW_TODO ,payload:newTodo })  ) ;\r\n}\r\n\r\nexport const deleteTodo = (id) => fn =>{\r\n    \r\n    fetch('http://localhost:5000' ,{\r\n            method: 'DELETE',\r\n            headers:{\r\n                'content-type': 'application/json'\r\n            },\r\n            body:JSON.stringify( {'id' :id })\r\n        }).then(res=>res.json())\r\n          .then( fn({ type:DELETE_TODO ,payload:id })  ) ;\r\n}\r\n\r\n","\r\nimport { FETCH_TODOS ,NEW_TODO ,DELETE_TODO ,UPDATE_TODO ,UPDATE_TODO_TEXT } from \"../actions/todoAction\";\r\n\r\n\r\nconst initialState = {\r\n    todos: [] ,\r\n    todo:{},\r\n    txtNewTodo:''\r\n};\r\n\r\nconst todoReducer = (state =initialState ,action)=>{\r\n    \r\n    switch(action.type)\r\n    {        \r\n        case FETCH_TODOS:\r\n            return {\r\n                ...state,\r\n                todos:action.payload\r\n            }\r\n        case NEW_TODO:            \r\n            return Object.assign({} ,state ,\r\n                { todos:[...state.todos ,{id : action.payload.id ,item: action.payload.item ,completed:0 }]  })\r\n            \r\n       case DELETE_TODO:\r\n            return Object.assign({} ,state ,\r\n                            {todos:state.todos.filter( (item ,index) =>  item.id !== action.payload) })\r\n            \r\n        case UPDATE_TODO_TEXT:               \r\n                return {\r\n                    ...state,\r\n                    txtNewTodo : action.payload\r\n                }\r\n                //return{ txtNewTodo :action.payload }\r\n        case UPDATE_TODO:         \r\n             \r\n             return Object.assign({} , state ,{ todos: state.todos.map(todo =>{\r\n                 if(todo.id === action.payload )\r\n                    return Object.assign({} ,todo ,{ completed: !todo.completed })\r\n                return todo;\r\n             } ) });\r\n                                          \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default todoReducer;","import {combineReducers} from 'redux';\r\nimport todoReducer from './todoReducer';\r\n\r\nexport default combineReducers({\r\n    todosReducerCombined:todoReducer\r\n})","import {createStore ,applyMiddleware ,compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport todosReducerCombined from  './reducers/index';\r\n\r\nconst initialState ={};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore( todosReducerCombined ,\r\n                            initialState,\r\n                            compose(applyMiddleware(...middleware) ,  \r\n    //window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n));\r\n\r\nexport default store;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Todos from './components/Todos';\nimport {Provider} from 'react-redux';\n//import {createStore ,applyMiddleware } from 'redux'\nimport store from './store';\n  \nfunction App() {\n  \n  return (\n    <Provider store = {store}>\n    <div className=\"App\">     \n      <Todos></Todos>\n    </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}